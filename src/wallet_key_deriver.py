import os
import binascii
from bip_utils import (
    Bip39SeedGenerator,
    Bip44,
    Bip44Coins,
    Bip44Changes,
    Bip39MnemonicValidator,
)
from bip39_mnemonic_generator import BIP39MnemonicGenerator


class WalletKeyDeriver:
    """

    Derives adress, seed and keys from a BIP39 mnemonic phrase.
    Supports Ethereum and Bitcoin addresses.

    You can check the result by comparing the derived keys with the keys generated by the https://iancoleman.io/bip39/#english.
    Warming: the keys generated by the https://iancoleman.io/bip39/#english are the same as the keys generated by this script but with different formats.


    """

    def __init__(self, mnemonic: str, passphrase: str = "", validate: bool = True):
        """

        Initializes the WalletKeyDeriver object.

        Parameters
            mnemonic: BIP39 mnemonic phrase.
            passphrase: Optional passphrase for the mnemonic.
            validate: Whether to validate the mnemonic phrase.

        """

        if validate and not Bip39MnemonicValidator().IsValid(mnemonic):
            raise ValueError("Invalid BIP39 mnemonic phrase.")

        self.mnemonic = mnemonic
        self.passphrase = passphrase
        self.seed_bytes = Bip39SeedGenerator(mnemonic).Generate(passphrase=passphrase)

    def derive_eth_address(
        self, account: int = 0, change: int = 0, address_index: int = 0
    ) -> dict:
        """

        Derives an Ethereum address and private key from the BIP39 mnemonic phrase.

        Parameters
            account: BIP44 account index.
            change: BIP44 change index (0 for external chain, 1 for internal chain).
            address_index: BIP44 address index.

        Returns:
            Dictionary containing the Ethereum address, private key, and public key.

        """

        bip44 = Bip44.FromSeed(self.seed_bytes, Bip44Coins.ETHEREUM)
        change_enum = Bip44Changes.CHAIN_EXT if change == 0 else Bip44Changes.CHAIN_INT

        addr = (
            bip44.Purpose().Coin().Account(account).Change(change_enum).AddressIndex(address_index)
        )
        return {
            "coin": "ETHEREUM",
            "path": f"m/44'/60'/{account}'/{change}/{address_index}",
            "address": addr.PublicKey().ToAddress(),
            "private_key": addr.PrivateKey().Raw().ToHex(),
            "public_key": addr.PublicKey().RawCompressed().ToHex(),
        }

    def derive_btc_address(
        self, account: int = 0, change: int = 0, address_index: int = 0
    ) -> dict:
        """

        Derives a Bitcoin address and private key from the BIP39 mnemonic phrase.

        Parameters
            account: BIP44 account index.
            change: BIP44 change index (0 for external chain, 1 for internal chain).
            address_index: BIP44 address index.

        Returns:
            Dictionary containing the Bitcoin address, private key, and public key.

        """

        bip44 = Bip44.FromSeed(self.seed_bytes, Bip44Coins.BITCOIN)
        change_enum = Bip44Changes.CHAIN_EXT if change == 0 else Bip44Changes.CHAIN_INT

        addr = (
            bip44.Purpose().Coin().Account(account).Change(change_enum).AddressIndex(address_index)
        )
        return {
            "coin": "BITCOIN",
            "path": f"m/44'/0'/{account}'/{change}/{address_index}",
            "address": addr.PublicKey().ToAddress(),
            "private_key": addr.PrivateKey().Raw().ToHex(),
            "public_key": addr.PublicKey().RawCompressed().ToHex(),
        }

    def get_seed_hex(self) -> str:
        return binascii.hexlify(self.seed_bytes).decode()

    @staticmethod
    def generate_and_derive(word_count: int = 12, passphrase: str = "") -> dict:
        """

        Generate a new BIP39 mnemonic phrase and derive keys for Ethereum and Bitcoin.

        Parameters
            word_count: Number of words in the mnemonic phrase.
            passphrase: Optional passphrase for the mnemonic.

        Returns:
            Dictionary containing the BIP39 mnemonic phrase, the seed hex, and the derived keys for Ethereum and Bitcoin.

        """

        generator = BIP39MnemonicGenerator()
        mnemonic = generator.generate_mnemonic(word_count)
        print(f"Generated Mnemonic ({word_count} words):\n{mnemonic}\n")
        deriver = WalletKeyDeriver(mnemonic, passphrase)

        seed_hex = deriver.get_seed_hex()
        eth_info = deriver.derive_eth_address()
        btc_info = deriver.derive_btc_address()

        return {
            "mnemonic": mnemonic,
            "seed": seed_hex,
            "ethereum": eth_info,
            "bitcoin": btc_info,
        }


# Example usage
if __name__ == "__main__":
    print(">>> Automatically generate mnemonic words and derive keys <<<")
    result = WalletKeyDeriver.generate_and_derive(word_count=12)

    print("\n[Mnemonic Phrase]")
    print(result["mnemonic"])

    print("\n[BIP39 Seed]")
    print(result["seed"])

    print("\n[Ethereum Address Info]")
    for k, v in result["ethereum"].items():
        print(f"{k}: {v}")

    print("\n[Bitcoin Address Info]")
    for k, v in result["bitcoin"].items():
        print(f"{k}: {v}")
